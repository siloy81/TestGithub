******************************************************
*                                                    *                 
*    @Author : KOROMA, Louis Tiabaga                 *
*    Software Engineer, IoT Project Manager          *
*     samedi 23/03/2019 15h58                        *
*                                                    *
******************************************************

Un commit correspond donc à une version de votre code à un instant t.
La somme de tous les commits constitue l'historique de votre projet
---------------------
Il existe de nombreux logiciels de gestion de version, qui peuvent être basés sur différents modèles :
 * Modèle centralisé : un serveur central contrôle toute la base de code du logiciel. 
Exemples de logiciels de versioning utilisant un modèle centralisé : SVN, CVS.

 * Modèle distribué : toutes les machines ont accès à la base de code, pas besoin de passer par un serveur central. 
Exemples de logiciels de versioning utilisant un modèle distribué : Git, Mercurial, Bazaar.

Le modèle distribué présente plusieurs avantages : 

Moins de risques de perdre son code puisqu'il est accessible par plusieurs sources.

On peut travailler plus rapidement et sans être connecté à Internet puisqu'il n'y a pas besoin de se connecter à un serveur central.
---------------------------

mkdir monPremierRepo

Pour activer un dossier comme repository Git, il suffit de se placer dans ce dossier avec le Terminal puis d'utiliser la commande git init. 

Lorsque vous créez un fichier dans un repository, vous devez donc l'ajouter à l'index Git à l'aide de la commande git add nomDeVotreFichier.extension.

Pour gagner du temps, vous pouvez ajouter tous les fichiers dans le répertoire courant en tapant
git add .

la commande  git log qui vous affiche la liste de tous les commits que vous avez réalisés ! 

 pour quitter le log, appuyez sur la touche Q de votre clavier

Et bien, si vous ne faites que mettre à jour un fichier que vous aviez déjà ajouté à l'index, vous pouvez condenser ces deux étapes de la façon suivante : 
git commit -a -m "Ajouté itinéraire dans checklist-vacances.md"
L'option   -a demande à Git de mettre à jour les fichiers déjà existants dans son index. Pratique, non ? 

********************************Positionnez-vous sur un commit donné

Lorsque vous effectuez une série de commits sur un projet, il peut vous arriver de vouloir remonter dans le temps à la recherche d'erreurs éventuelles par exemple. Pour vous positionner sur un commit donné de votre historique, il vous suffit d'utiliser la commande git checkout de la façon suivante : 
git checkout SHADuCommit

Pour revenir à votre branche principale (au commit le plus récent), on utilise la même commande : 
git checkout master


On ne peut pas vraiment "supprimer" un commit, mais on a plusieurs options pour l'annuler. Cependant, ces options ont des limites et sont à utiliser avec prudence et parcimonie !
Je vous présente une de ces options : vous pouvez "revert" un commit, c'est-à-dire créer un nouveau commit qui fait l'inverse du précédent, avec la commande suivante :
git revert SHADuCommit
Attention, ça crée un nouveau commit dans l'historique du coup ! (le commit "inverse" du précédent)


Sinon, si vous voulez simplement modifier le message de votre dernier commit, vous pouvez utiliser la commande suivante :
git commit --amend -m "Votre nouveau message"
... mais attention, vous ne pouvez modifier ce message que si vous n'avez pas encore pushé votre commit sur l'origine !


Je n'ai pas encore fait mon nouveau commit, mais je veux annuler tous les changements que je n'ai pas encore commités. Possible ?
 Possible avec un reset !
git reset --hard?

*******************************les remote

Lorsque vous travaillez sur un projet sur votre machine, il est important d'avoir un backup de votre code sur une autre machine, au cas où la vôtre tombe en panne par exemple. Une fois que vous avez travaillé sur votre code et effectué vos commits, vous allez donc les envoyer sur un remote, c'est-à-dire une autre machine qui peut être : 

 - interne (si vous avez la chance d'avoir plusieurs ordinateurs ;) )
 - externe (grâce à des services comme GitHub ou BitBucket). Utiliser un remote externe va aussi vous permettre de travailler sur des projets à plusieurs, pour que tout le monde ait accès aux dernières modifications de chacun sur un remote partagé. 

*******************************GitHub, qu'est-ce que c'est ?

Comme nous l'avons vu dans le chapitre précédent, GitHub est un service en ligne qui permet d'héberger ses repositories de code. GitHub est un outil gratuit pour héberger du code open source, et propose également des plans payants pour les projets de code privés.

Vous allez pouvoir notamment : 
 - Communiquer avec d'autres développeurs et signaler des problèmes de code en déclarant des "issues" ;
 - Partager des morceaux de code en ligne à l'aide de "gists" ;
 - Proposer des modifications de code à d'autres repos en faisant des "pull requests" ;
 - Et même récupérer du code depuis un autre repository.

NB : appuyez sur la touche t, vous pourrez alors faire une recherche dans vos noms de fichiers en tapant un mot / des lettres clé ! 

*******************************Récupérez du code d'un autre repository

À partir de GitHub, vous pouvez copier un repository sur votre machine. Pour cela, il vous suffit de rechercher le repository qui vous intéresse sur GitHub, de vous y placer, puis d'utiliser l'option "clone URL" en bas à droite de l'écran. 
Cette option vous propose un lien SSH, HTTPS ou Subversion. Ici, nous allons choisir un lien HTTPS, le copier, puis coller ce lien en utilisant la commande git clone dans le dossier que vous aurez choisi sur votre machine : 
git clone lienFourniParGitHub 

***************************** creer votre 1er repository

Vous avez également une option "Initialise with a README", qui vous permet de cloner votre repository sur votre machine. Cette option est à cocher uniquement dans le cas où vous n'avez pas encore créé le repository en question sur votre machine (ce qui est bien notre cas ici, cochez donc !) 


parlant de la commande git clone, notez que vous pouvez cloner votre repo avec deux options : 
 - L'option HTTPS que je vous ai  invité à utiliser dans ce cours : c'est l'option la plus simple, qui demande de fournir vos identifiants GitHub (nom d'utilisateur et mot de passe) à chaque fois que vous faites un git clone. 
 - L'option SSH qui est plus pratique car elle ne vous demande pas vos identifiants à chaque fois. Par contre, pour l'utiliser, il faut générer une clé SSH, ce qui est un peu plus compliqué pour ce cours d'initiation. Mais une fois que vous vous sentez plus à l'aise, je vous invite à consulter la marche à suivre dans la documentation de GitHub et à utiliser cette option SSH.

***********************************Envoyez votre code sur GitHub  (commande git push)

Vous avez clôné votre repo GitHub sur votre machine. Comment faire pour synchroniser les modifications que vous faites dans votre repo sur votre machine avec votre repo sur GitHub ?

 - Ouvrez votre terminal et placez-vous dans votre repo local.
 - Prêts... Faites un/des commit(s) des modifications que vous avez ajoutées sur ce repo.
 - Pushez! Envoyez ces modifications sur votre repo GitHub en utilisant la commande git push:
    git push origin master

Cette commande demande à Git :
"Envoie mes modifs dans la branche master de mon remote origin."
 - La branche master est la branche qui contient le code courant de votre repo GitHub. Ne vous préoccupez pas trop du terme "branche", on y reviendra par la suite.
 - Le remote sur lequel vous envoyez votre code est appelé origin par défaut. Ici, ce remote est GitHub. Si vous aviez plusieurs remotes (par exemple, votre téléphone portable ou un 2e ordinateur), vous pourriez envoyer votre code sur un remote "téléphone" ou "ordi2".

Une fois que vous avez "pushé" votre code en ligne, vous pouvez aller consulter votre repo sur GitHub. Vous y retrouverez les derniers commits effectués en cliquant sur l'option "Commits" dans votre repo : 

***********************************recuperez des modifs (commande git pull )

Pour récupérer en local les dernières modifications du repo GitHub, il vous faut utiliser la commande git pull : 
git pull origin master


  
